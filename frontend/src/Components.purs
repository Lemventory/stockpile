module Components where

import Prelude

-- import API (deleteInventory, updateInventory, writeInventory)
-- import Data.Array (all, null)
-- import Data.Either (Either(..))
-- import Data.Maybe (Maybe(..), fromMaybe)
-- import Data.Tuple.Nested ((/\))
-- import Deku.Control (text, text_)
-- import Deku.Core (Nut)
-- import Deku.DOM as D
-- import Deku.DOM.Attributes as DA
-- import Deku.DOM.Listeners as DL
-- import Effect (Effect)
-- import Effect.Aff (Fiber, launchAff)
-- import Effect.Class (liftEffect)
-- import Effect.Class.Console as Console
-- import FRP.Poll (Poll)
-- import Form (buttonClass)
-- import Types (InventoryResponse(..), MenuItem(..))
-- import Utils (ensureInt, ensureNumber)
-- import Validation (validateMenuItem)

-- -- | Generic status message display
-- renderStatusMessage :: Boolean -> String -> Nut
-- renderStatusMessage isSuccess statusMessage =
--   if statusMessage == "" then 
--     D.div [] []
--   else if isSuccess then
--     D.div
--       [ DA.klass_ "bg-green-50 p-4 rounded mt-4" ]
--       [ D.p
--           [ DA.klass_ "text-green-700" ]
--           [ text_ statusMessage ]
--       ]
--   else
--     D.div
--       [ DA.klass_ "bg-red-50 p-4 rounded mt-4" ]
--       [ D.p
--           [ DA.klass_ "text-red-600" ]
--           [ text_ statusMessage ]
--       ]

-- -- | Render error messages
-- renderErrors :: Array String -> Nut
-- renderErrors errors =
--   if null errors then
--     D.div [] []
--   else
--     D.ul [ DA.klass_ "text-red-500 text-sm bg-red-50 p-4 rounded mb-4" ]
--       (map (\err -> D.li_ [ text_ err ]) errors)

-- -- | Generic action button - matching existing code patterns
-- actionButton :: forall e. String -> String -> Poll (Boolean) -> Poll (Boolean) -> (e -> Effect Unit) -> Nut
-- actionButton colorClass label isDisabledPoll isSubmittingPoll onClick =
--   D.button
--     [ DA.klass_ $ buttonClass colorClass
--     , DA.disabled $ map show $ (||) <$> isDisabledPoll <*> isSubmittingPoll
--     , DL.click_ onClick
--     ]
--     [ text $ map
--         (\isSubmitting -> if isSubmitting then "Processing..." else label)
--         isSubmittingPoll
--     ]

-- -- | Return to inventory link
-- returnToInventoryLink :: String -> Nut
-- returnToInventoryLink label =
--   D.a
--     [ DA.klass_ "text-blue-600 hover:underline"
--     , DA.href_ "/#/"
--     ]
--     [ text_ label ]

-- -- | Submit form handler that can be used by both Create and Edit components
-- handleFormSubmission :: 
--   { setSubmitting :: Boolean -> Effect Unit
--   , setStatusMessage :: String -> Effect Unit
--   , setErrors :: Array String -> Effect Unit
--   , resetForm :: Maybe (Effect Unit)
--   , setFiber :: Fiber Unit -> Effect Unit
--   , formData :: 
--       { sort :: String
--       , name :: String
--       , sku :: String
--       , brand :: String
--       , price :: String
--       , measure_unit :: String
--       , per_package :: String
--       , quantity :: String
--       , category :: String
--       , subcategory :: String
--       , description :: String
--       , tags :: String
--       , effects :: String
--       , thc :: String
--       , cbg :: String
--       , strain :: String
--       , creator :: String
--       , species :: String
--       , dominant_terpene :: String
--       , terpenes :: String
--       , lineage :: String
--       , leafly_url :: String
--       , img :: String
--       }
--   , isUpdate :: Boolean
--   } -> Effect Unit
-- handleFormSubmission options = do
--   options.setSubmitting true
--   options.setErrors []
--   options.setStatusMessage $ if options.isUpdate then "Updating item..." else "Creating item..."

--   void $ options.setFiber =<< launchAff do
--     let
--       formInput =
--         { sort: ensureInt options.formData.sort
--         , name: options.formData.name
--         , sku: options.formData.sku
--         , brand: options.formData.brand
--         , price: ensureNumber options.formData.price
--         , measure_unit: options.formData.measure_unit
--         , per_package: options.formData.per_package
--         , quantity: ensureInt options.formData.quantity
--         , category: options.formData.category
--         , subcategory: options.formData.subcategory
--         , description: options.formData.description
--         , tags: options.formData.tags
--         , effects: options.formData.effects
--         , strain_lineage:
--           { thc: options.formData.thc
--           , cbg: options.formData.cbg
--           , strain: options.formData.strain
--           , creator: options.formData.creator
--           , species: options.formData.species
--           , dominant_terpene: options.formData.dominant_terpene
--           , terpenes: options.formData.terpenes
--           , lineage: options.formData.lineage
--           , leafly_url: options.formData.leafly_url
--           , img: options.formData.img
--           }
--         }

--     liftEffect $ Console.group $ if options.isUpdate then "Update Form Submission" else "Create Form Submission"
--     liftEffect $ Console.log "Form data:"
--     liftEffect $ Console.logShow formInput

--     case validateMenuItem formInput of
--       Left err -> liftEffect do
--         Console.error "Form validation failed:"
--         Console.errorShow err
--         Console.groupEnd
--         options.setStatusMessage $ "Validation error: " <> err
--         options.setSubmitting false
--         options.setErrors [err]

--       Right menuItem -> do
--         liftEffect $ Console.info "Form validated successfully:"
--         liftEffect $ Console.logShow menuItem

--         result <- if options.isUpdate 
--                   then updateInventory menuItem 
--                   else writeInventory menuItem

--         liftEffect case result of
--           Right (Message msg) -> do
--             Console.info "Submission successful"
--             options.setStatusMessage msg
--             case options.resetForm of
--               Just reset -> reset
--               Nothing -> pure unit

--           Right (InventoryData _) -> do
--             Console.info $ if options.isUpdate then "Item updated in inventory" else "Item added to inventory"
--             options.setStatusMessage $ if options.isUpdate then "Item successfully updated!" else "Item successfully added to inventory!"
--             case options.resetForm of
--               Just reset -> reset
--               Nothing -> pure unit

--           Left err -> do
--             Console.error "API Error:"
--             Console.errorShow err
--             options.setStatusMessage $ "Error saving item: " <> err
--             options.setErrors [err]

--         liftEffect $ Console.groupEnd
--         liftEffect $ options.setSubmitting false

-- -- | Handle item deletion
-- handleDeleteItem :: 
--   { itemId :: String
--   , setSubmitting :: Boolean -> Effect Unit
--   , setStatusMessage :: String -> Effect Unit
--   , setSuccess :: Boolean -> Effect Unit
--   , setFiber :: Fiber Unit -> Effect Unit
--   } -> Effect Unit
-- handleDeleteItem options = do
--   options.setSubmitting true
--   void $ options.setFiber =<< launchAff do
--     result <- deleteInventory options.itemId
--     liftEffect $ case result of
--       Right (Message msg) -> do
--         Console.log $ "Deletion successful: " <> msg
--         options.setStatusMessage msg
--         options.setSuccess true
--         options.setSubmitting false

--       Right (InventoryData _) -> do
--         Console.log "Item deleted successfully"
--         options.setStatusMessage "Item successfully deleted!"
--         options.setSuccess true
--         options.setSubmitting false

--       Left err -> do
--         Console.error $ "Failed to delete item: " <> err
--         options.setStatusMessage $ "Error: " <> err
--         options.setSubmitting false

-- -- | Check form validity based on validation states
-- checkFormValidity :: 
--   { nameValid :: Maybe Boolean
--   , skuValid :: Maybe Boolean
--   , brandValid :: Maybe Boolean
--   , priceValid :: Maybe Boolean
--   , quantityValid :: Maybe Boolean
--   , categoryValid :: Maybe Boolean
--   , sortValid :: Maybe Boolean
--   , measureUnitValid :: Maybe Boolean
--   , perPackageValid :: Maybe Boolean
--   , subcategoryValid :: Maybe Boolean
--   , thcValid :: Maybe Boolean
--   , cbgValid :: Maybe Boolean
--   , strainValid :: Maybe Boolean
--   , creatorValid :: Maybe Boolean
--   , speciesValid :: Maybe Boolean
--   , dominantTerpeneValid :: Maybe Boolean
--   , leaflyUrlValid :: Maybe Boolean
--   , imgValid :: Maybe Boolean
--   , descriptionValid :: Maybe Boolean
--   , tagsValid :: Maybe Boolean
--   , effectsValid :: Maybe Boolean
--   , terpenesValid :: Maybe Boolean
--   , lineageValid :: Maybe Boolean
--   } -> Boolean
-- checkFormValidity validations =
--   all (fromMaybe false)
--     [ validations.nameValid
--     , validations.skuValid
--     , validations.brandValid
--     , validations.priceValid
--     , validations.quantityValid
--     , validations.sortValid
--     , validations.measureUnitValid
--     , validations.perPackageValid
--     , validations.categoryValid
--     , validations.subcategoryValid
--     , validations.thcValid
--     , validations.cbgValid
--     , validations.strainValid
--     , validations.creatorValid
--     , validations.speciesValid
--     , validations.dominantTerpeneValid
--     , validations.leaflyUrlValid
--     , validations.imgValid
--     , validations.descriptionValid
--     , validations.tagsValid
--     , validations.effectsValid
--     , validations.terpenesValid
--     , validations.lineageValid
--     ]

-- -- | Generic error page component
-- renderErrorPage :: String -> Nut
-- renderErrorPage message =
--   D.div
--     [ DA.klass_ "error-container max-w-2xl mx-auto p-6" ]
--     [ D.div
--         [ DA.klass_ "bg-red-100 border-l-4 border-red-500 text-red-700 p-4" ]
--         [ D.h2
--             [ DA.klass_ "text-lg font-medium mb-2" ]
--             [ text_ "Error" ]
--         , D.p_
--             [ text_ message ]
--         , D.div
--             [ DA.klass_ "mt-4" ]
--             [ returnToInventoryLink "Return to Inventory" ]
--         ]
--     ]